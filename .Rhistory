sqrt(mean((y - pred)^2))
}
# Error on test data set simple linear regression
calc_rmse(as.vector(y_tst$house_price),predict(lm1, df_tst))
df1 = df %>% mutate(year = factor(year),
month = factor(month))
df_clean = df1
set.seed(42)
# Test Train Split
df_trn_idx = sample(nrow(df_clean),size = 0.8*nrow(df_clean))
df_trn = df_clean[df_trn_idx,]
df_tst = df_clean[-df_trn_idx,-8]
y_tst = df_clean[-df_trn_idx,8]
# Building a simple linear model
lm1 = lm(house_price ~., data = df_trn)
summary(lm1)
# conducting prediction on the test set
calc_rmse = function(y,pred){
sqrt(mean((y - pred)^2))
}
# Error on test data set simple linear regression
calc_rmse(as.vector(y_tst$house_price),predict(lm1, df_tst))
df_clean = df
#df_clean = df1
set.seed(42)
# Test Train Split
df_trn_idx = sample(nrow(df_clean),size = 0.8*nrow(df_clean))
df_trn = df_clean[df_trn_idx,]
df_tst = df_clean[-df_trn_idx,-8]
y_tst = df_clean[-df_trn_idx,8]
# Building a simple linear model
lm1 = lm(house_price ~., data = df_trn)
summary(lm1)
# conducting prediction on the test set
calc_rmse = function(y,pred){
sqrt(mean((y - pred)^2))
}
# Error on test data set simple linear regression
calc_rmse(as.vector(y_tst$house_price),predict(lm1, df_tst))
df_trn[,1:7]
# Principal Component Regression
pr_house = prcomp(df_trn[,1:7])
summary(pr_house)
dim(pr_house$x)
pr_house$x
pr_house$rotation
round(pr_house$rotation[,1],2)
round(pr_house$rotation[,1],3)
round(pr_house$rotation[,1],4)
summary(pr_house)
# Principal Component Regression
pr_house = prcomp(df_trn[,1:7], center = TRUE, scale = TRUE)
summary(pr_house)
dim(pr_house$x)
predict(pr_house, df_tst)
library(pls)
plot(pr_house$sdev, TYPE = "l", ylab = "SD of PC", xlab = "PC Number")
plot(pr_house$sdev, type = "l", ylab = "SD of PC", xlab = "PC Number")
summary(pr_house)
cbind(1:7,pr_house$sdev)
?data.frame
data.frame(cbind(1:7,pr_house$sdev))
colnames(scree_df) = c("PC Number","SD of PC")
scree_df = data.frame(cbind(1:7,pr_house$sdev))
colnames(scree_df) = c("PC Number","SD of PC")
ggplot(data=scree_df, aes(x=`PC Number`, y=`SD of PC`, group=1)) +
geom_line()+
geom_point()
scree_df = data.frame(cbind(1:7,pr_house$sdev))
colnames(scree_df) = c("PC Number","SD of PC")
ggplot(data=scree_df, aes(x=`PC Number`, y=`SD of PC`, group=1)) +
geom_line()+
geom_point() +
labs(title = "Scree Plot for PCR")
# Lets find out the number of components required using cross validation
pcrmod = pcr(house_price ~. , data = df_trn, ncomp = 8)
# Lets find out the number of components required using cross validation
pcrmod = pcr(house_price ~. , data = df_trn, ncomp = 7)
pcrmse = RMSEP(pcrmod, newdata = df_tst)
View(df_trn)
cbind(df_tst,y_tst)
pcrmse = RMSEP(pcrmod, newdata = cbind(df_tst,y_tst))
plot(pcrmse, main = "")
pcrmse
data.frame(cbind(0:7,pcrmse))
pcrmse
0:7
unname(pcrmse)
unname(pcrmse)
as.vector(pcrmse)
length(as.vector(pcrmse))
length(pcrmse)
pcrmse
pcrmse[1]
pcrmse$val
pcrmse$comps
pcrmse$call
pcrmse$cumulative
pcrmse$type
pcrmse$val
pcrmse$val[1]
data.frame(cbind(0:7,pcrmse$val))
colnames(cv_df) = c("Number of Components","RMSE")
cv_df = data.frame(cbind(0:7,pcrmse$val))
colnames(cv_df) = c("Number of Components","RMSE")
ggplot(data=cv_df, aes(x=`PC Number`, y=`SD of PC`, group=1)) +
geom_line()+
geom_point() +
labs(title = "Test Error vs Number of Components")
ggplot(data=cv_df, aes(x=`Number of Components`, y=`RMSE`, group=1)) +
geom_line()+
geom_point() +
labs(title = "Test Error vs Number of Components")
which.min(pcrmse$val)
# Training model with 5 principal components
pr_house = prcomp(df_trn[,1:7], center = TRUE, scale = TRUE)
summary(pr_house)
dim(pr_house$x)
pr_house
pr_house$x
pr_house$x[,1:5]
pcr_mod = lm(df_trn$house_price ~ pr_house$x[,1:5])
predict(pr_house, df_tst)
predict(pr_house, df_tst)[,1:5]
predict(pcr_mod, predict(pr_house, df_tst)[,1:5])
predict(pcr_mod, data.frame(predict(pr_house, df_tst)[,1:5]))
predict(pr_house, df_tst)[,1:5]
# Changing the test data set
predict(pr_house, df_tst)[,1:5]
pr_house$x[,1:5]
pcr_mod = lm(df_trn$house_price ~ pr_house$x[,1:5])
# Changing the test data set
df = data.frame(predict(pr_house, df_tst)[,1:5])
# Reading the data frame
df=readxl::read_xlsx("Real_estate_valuation_data_set.xlsx")
# Viewing rows
head(df,5)
# Changing column names
colnames(df) = c("index",
"transaction_date",
"house_age",
"distance_to_nearest_metro_station",
"no_of_convenience_stores",
"latitude",
"longitude",
"house_price")
# dropping index
df = df[,-1]
# Sorting the months (The dates range from Aug 2012 to July 2013)
months = sort(unique(df$transaction_date))
# subsetting months vector
v1 = months[1:5] # year 2012
v2 = months[6:12] # year 2013
# helper function find out month number
month = function(x){
if(x == months[1]){return(08)}
else if(x == months[2]){return(09)}
else if(x == months[3]){return(10)}
else if(x == months[4]){return(11)}
else if(x == months[5]){return(12)}
else if(x == months[6]){return(01)}
else if(x == months[7]){return(02)}
else if(x == months[8]){return(03)}
else if(x == months[9]){return(04)}
else if(x == months[10]){return(05)}
else if(x == months[11]){return(06)}
else if(x == months[12]){return(07)}
}
# helper function to determine year
year = function(x){
if(x %in% v1){return(2012)}
else if(x %in% v2) {return(2013)}
}
df$month = sapply(df$transaction_date, month) # creating month column
df$year = sapply(df$transaction_date, year) # creating year column
# Dropping transaction_date column
df = df[,-1]
df = df %>% select(year,
month,
house_age,
distance_to_nearest_metro_station,
no_of_convenience_stores,
latitude,
longitude,
house_price)
# Changing the test data set
pcr_test = data.frame(predict(pr_house, df_tst)[,1:5])
View(pcr_test)
predict(pcr_mod, pcr_test)
predict(pcr_mod, newdata = pcr_test)
summary(pcr_mod)
cbind(data.frame(pr_house$x[,1:5]),df_trn$house_price)
colnames(pcr_train_df) = c("PC1","PC2","PC3","PC4","PC5","house_price")
pcr_train_df = cbind(data.frame(pr_house$x[,1:5]),df_trn$house_price)
colnames(pcr_train_df) = c("PC1","PC2","PC3","PC4","PC5","house_price")
pcr_mod = lm(house_price ~ ., data = pcr_train_df)
summary(pcr_mod)
# Changing the test data set
pcr_test = data.frame(predict(pr_house, df_tst)[,1:5])
View(pcr_test)
predict(pcr_mod, pcr_test)
calc_rmse(as.vector(y_tst$house_price),predict(pcr_mod, pcr_test))
pcr_train_df = cbind(data.frame(pr_house$x[,1:4]),df_trn$house_price)
colnames(pcr_train_df) = c("PC1","PC2","PC3","PC4","PC5","house_price")
colnames(pcr_train_df) = c("PC1","PC2","PC3","PC4","house_price")
pcr_mod = lm(house_price ~ ., data = pcr_train_df)
summary(pcr_mod)
# Changing the test data set
pcr_test = data.frame(predict(pr_house, df_tst)[,1:4])
predict(pcr_mod, pcr_test)
calc_rmse(as.vector(y_tst$house_price),predict(pcr_mod, pcr_test))
colnames(pcr_train_df) = c("PC1","PC2","PC3","PC4","PC5",'PC6',"PC6","house_price")
# Training model with 5 principal components
pr_house = prcomp(df_trn[,1:7], center = TRUE, scale = TRUE)
summary(pr_house)
pcr_train_df = cbind(data.frame(pr_house$x[,1:7]),df_trn$house_price)
colnames(pcr_train_df) = c("PC1","PC2","PC3","PC4","PC5",'PC6',"PC7","house_price")
pcr_mod = lm(house_price ~ ., data = pcr_train_df)
summary(pcr_mod)
# Changing the test data set
pcr_test = data.frame(predict(pr_house, df_tst)[,1:7])
predict(pcr_mod, pcr_test)
calc_rmse(as.vector(y_tst$house_price),predict(pcr_mod, pcr_test))
# Error on test data set simple linear regression
calc_rmse(as.vector(y_tst$house_price),predict(lm1, df_tst))
# Training model with 5 principal components
pr_house = prcomp(df_trn[,1:7], center = TRUE, scale = TRUE)
summary(pr_house)
pcr_train_df = cbind(data.frame(pr_house$x[,1:5]),df_trn$house_price)
colnames(pcr_train_df) = c("PC1","PC2","PC3","PC4","PC5","house_price")
pcr_mod = lm(house_price ~ ., data = pcr_train_df)
summary(pcr_mod)
# Changing the test data set
pcr_test = data.frame(predict(pr_house, df_tst)[,1:5])
predict(pcr_mod, pcr_test)
calc_rmse(as.vector(y_tst$house_price),predict(pcr_mod, pcr_test))
# Ridge Regression
rgmod = lm.ridge(house_price ~., df_trn, lambda = seq(0, 5e-8, len = 21))
library(MASS)
# Ridge Regression
rgmod = lm.ridge(house_price ~., df_trn, lambda = seq(0, 5e-8, len = 21))
matplot(rgmod$lambda, coef(rgmod), type = "l", xlab = expression(lambda), ylab = expression(hat(beta)), col = 1)
coef(rgmod)
scale(df_trn)
?scale
scale(df_trn, center = TRUE, scale = TRUE)
df_trn[1:7]
scale(df_trn[1:7], center = TRUE, scale = TRUE)
scaled_df = scale(df_trn[1:7], center = TRUE, scale = TRUE)
scaled_df
colanmes(scaled_df)
scaled_df = data.frame(scale(df_trn[1:7], center = TRUE, scale = TRUE))
colanmes(scaled_df)
colnames(scaled_df)
ridge_df = cbind(scaled_df, df_trn$house_price)
# Ridge Regression
rgmod = lm.ridge(house_price ~., ridge_df, lambda = seq(0, 5e-8, len = 21))
ridge_df
colnames(ridge_df)[8] = "house_price"
# Ridge Regression
rgmod = lm.ridge(house_price ~., ridge_df, lambda = seq(0, 5e-8, len = 21))
matplot(rgmod$lambda, coef(rgmod), type = "l", xlab = expression(lambda), ylab = expression(hat(beta)), col = 1)
# Ridge Regression
rgmod = lm.ridge(house_price ~., ridge_df, lambda = seq(0, 1, len = 21))
matplot(rgmod$lambda, coef(rgmod), type = "l", xlab = expression(lambda), ylab = expression(hat(beta)), col = 1)
# Ridge Regression
rgmod = lm.ridge(house_price ~., ridge_df, lambda = seq(0, 10, len = 21))
matplot(rgmod$lambda, coef(rgmod), type = "l", xlab = expression(lambda), ylab = expression(hat(beta)), col = 1)
# Ridge Regression
rgmod = lm.ridge(house_price ~., ridge_df, lambda = seq(0, 100, len = 21))
matplot(rgmod$lambda, coef(rgmod), type = "l", xlab = expression(lambda), ylab = expression(hat(beta)), col = 1)
View(rgmod)
# Ridge Regression
rgmod = lm.ridge(house_price ~., ridge_df, lambda = seq(0, 1, len = 21))
matplot(rgmod$lambda, coef(rgmod), type = "l", xlab = expression(lambda), ylab = expression(hat(beta)), col = 1)
# Ridge Regression
rgmod = lm.ridge(house_price ~., ridge_df, lambda = seq(0, 1000, len = 21))
matplot(rgmod$lambda, coef(rgmod), type = "l", xlab = expression(lambda), ylab = expression(hat(beta)), col = 1)
# Ridge Regression
rgmod = lm.ridge(house_price ~., ridge_df, lambda = seq(0, 1000, len = 21))
matplot(rgmod$lambda, coef(rgmod), type = "l", xlab = expression(lambda), ylab = expression(hat(beta)), col = 1)
# Ridge Regression
rgmod = lm.ridge(house_price ~., ridge_df, lambda = seq(0, 1000, len = 100))
matplot(rgmod$lambda, coef(rgmod), type = "l", xlab = expression(lambda), ylab = expression(hat(beta)), col = 1)
# Ridge Regression
rgmod = lm.ridge(house_price ~., ridge_df, lambda = seq(0, 2000, len = 100))
matplot(rgmod$lambda, coef(rgmod), type = "l", xlab = expression(lambda), ylab = expression(hat(beta)), col = 1)
whihc.min(rgmod$GCV)
which.min(rgmod$GCV)
name(which.min(rgmod$GCV))
name(which.min(rgmod$GCV))
abline(v = 20.20202)
# Ridge Regression
rgmod = lm.ridge(house_price ~., ridge_df, lambda = seq(0, 5e-8, len = 100))
matplot(rgmod$lambda, coef(rgmod), type = "l", xlab = expression(lambda), ylab = expression(hat(beta)), col = 1)
# Ridge Regression
rgmod = lm.ridge(house_price ~., ridge_df, lambda = seq(0, 5e, len = 100))
matplot(rgmod$lambda, coef(rgmod), type = "l", xlab = expression(lambda), ylab = expression(hat(beta)), col = 1)
name(which.min(rgmod$GCV))
# Ridge Regression
rgmod = lm.ridge(house_price ~., ridge_df, lambda = seq(0, 5e5, len = 100))
matplot(rgmod$lambda, coef(rgmod), type = "l", xlab = expression(lambda), ylab = expression(hat(beta)), col = 1)
# Ridge Regression
rgmod = lm.ridge(house_price ~., ridge_df, lambda = seq(0, 5e2, len = 100))
matplot(rgmod$lambda, coef(rgmod), type = "l", xlab = expression(lambda), ylab = expression(hat(beta)), col = 1)
# Ridge Regression
rgmod = lm.ridge(house_price ~., ridge_df, lambda = seq(0, 5e3, len = 100))
matplot(rgmod$lambda, coef(rgmod), type = "l", xlab = expression(lambda), ylab = expression(hat(beta)), col = 1)
which.min(rgmod$GCV)
max(cooks.distance(lmod))
halfnorm(cooks.distance(lmod), labs = row.names(df), ylab = "Cook's distance")
qt(.05/(2*n), n-p-1)
qt(.05/(2*n), n-p-1)
df = df[-271,]
df = df[-313,]
# Cleaning the data frame
df_clean = df
set.seed(42)
# Test Train Split
df_trn_idx = sample(nrow(df_clean),size = 0.8*nrow(df_clean))
df_trn = df_clean[df_trn_idx,]
df_tst = df_clean[-df_trn_idx,-8]
y_tst = df_clean[-df_trn_idx,8]
# Building a simple linear model
lm1 = lm(house_price ~., data = df_trn)
summary(lm1)
# conducting prediction on the test set
calc_rmse = function(y,pred){
sqrt(mean((y - pred)^2))
}
# Error on test data set simple linear regression
calc_rmse(as.vector(y_tst$house_price),predict(lm1, df_tst))
# Principal Component Regression
pr_house = prcomp(df_trn[,1:7], center = TRUE, scale = TRUE)
summary(pr_house)
dim(pr_house$x)
predict(pr_house, df_tst)
plot(pr_house$sdev, type = "l", ylab = "SD of PC", xlab = "PC Number")
scree_df = data.frame(cbind(1:7,pr_house$sdev))
colnames(scree_df) = c("PC Number","SD of PC")
ggplot(data=scree_df, aes(x=`PC Number`, y=`SD of PC`, group=1)) +
geom_line()+
geom_point() +
labs(title = "Scree Plot for PCR")
# Lets find out the number of components required using cross validation
pcrmod = pcr(house_price ~. , data = df_trn, ncomp = 7)
pcrmse = RMSEP(pcrmod, newdata = cbind(df_tst,y_tst))
plot(pcrmse, main = "")
cv_df = data.frame(cbind(0:7,pcrmse$val))
colnames(cv_df) = c("Number of Components","RMSE")
ggplot(data=cv_df, aes(x=`Number of Components`, y=`RMSE`, group=1)) +
geom_line()+
geom_point() +
labs(title = "Test Error vs Number of Components")
# Finding out what number of Principal Components give the least error on the test set
which.min(pcrmse$val)
# Training model with 5 principal components
pr_house = prcomp(df_trn[,1:7], center = TRUE, scale = TRUE)
summary(pr_house)
pcr_train_df = cbind(data.frame(pr_house$x[,1:5]),df_trn$house_price)
colnames(pcr_train_df) = c("PC1","PC2","PC3","PC4","PC5","house_price")
pcr_mod = lm(house_price ~ ., data = pcr_train_df)
summary(pcr_mod)
# Changing the test data set
pcr_test = data.frame(predict(pr_house, df_tst)[,1:5])
predict(pcr_mod, pcr_test)
calc_rmse(as.vector(y_tst$house_price),predict(pcr_mod, pcr_test))
scaled_df = data.frame(scale(df_trn[1:7], center = TRUE, scale = TRUE))
ridge_df = cbind(scaled_df, df_trn$house_price)
colnames(ridge_df)[8] = "house_price"
# Ridge Regression
rgmod = lm.ridge(house_price ~., ridge_df, lambda = seq(0, 5e3, len = 100))
matplot(rgmod$lambda, coef(rgmod), type = "l", xlab = expression(lambda), ylab = expression(hat(beta)), col = 1)
which.min(rgmod$GCV)
abline(v = 0)
# Regression Diagnostics
plot(lm1,1)
# Regression Diagnostics
plot(lm1,2)
# Regression Diagnostics
plot(lm1,3)
# Regression Diagnostics
plot(lm1,4)
# Regression Diagnostics
plot(lm1,1)
plot(lm1,2)
plot(lm1,4)
plot(lm1,3)
install.packages("glmnet")
# Cleaning the data frame
df_clean = df
set.seed(42)
# Test Train Split
df_trn_idx = sample(nrow(df_clean),size = 0.8*nrow(df_clean))
df_trn = df_clean[df_trn_idx,]
df_tst = df_clean[-df_trn_idx,-8]
y_tst = df_clean[-df_trn_idx,8]
# Building a simple linear model
lm1 = lm(house_price ~., data = df_trn)
summary(lm1)
calc_rmse = function(y,pred){
sqrt(mean((y - pred)^2))
}
# Error on test data set simple linear regression
calc_rmse(as.vector(y_tst$house_price),predict(lm1, df_tst))
View(df)
summary(df$house_price)
# Error on test data set simple linear regression
calc_rmse(as.vector(y_tst$house_price),predict(lm1, df_tst))
calc_rmse(as.vector(y_tst$house_price),predict(pcr_mod, pcr_test))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(faraway)
library(ggplot2)
library(ggmap)
library(RColorBrewer)
library(tidyverse)
library(caret)
library(ggcorrplot)
library(pls)
library(MASS)
# Reading the data frame
df=readxl::read_xlsx("Real_estate_valuation_data_set.xlsx")
head(df,5)
# Changing column names
colnames(df) = c("index",
"transaction_date",
"house_age",
"distance_to_nearest_metro_station",
"no_of_convenience_stores",
"latitude",
"longitude",
"house_price")
# dropping index
df = df[,-1]
# Sorting the months (The dates range from Aug 2012 to July 2013)
months = sort(unique(df$transaction_date))
# subsetting months vector
v1 = months[1:5] # year 2012
v2 = months[6:12] # year 2013
# helper function find out month number
month = function(x){
if(x == months[1]){return(08)}
else if(x == months[2]){return(09)}
else if(x == months[3]){return(10)}
else if(x == months[4]){return(11)}
else if(x == months[5]){return(12)}
else if(x == months[6]){return(01)}
else if(x == months[7]){return(02)}
else if(x == months[8]){return(03)}
else if(x == months[9]){return(04)}
else if(x == months[10]){return(05)}
else if(x == months[11]){return(06)}
else if(x == months[12]){return(07)}
}
# helper function to determine year
year = function(x){
if(x %in% v1){return(2012)}
else if(x %in% v2) {return(2013)}
}
df$month = sapply(df$transaction_date, month) # creating month column
df$year = sapply(df$transaction_date, year) # creating year column
# Dropping transaction_date column
df = df[,-1]
df = df %>% select(year,
month,
house_age,
distance_to_nearest_metro_station,
no_of_convenience_stores,
latitude,
longitude,
house_price)
# Changing column names
colnames(df) = c("index",
"transaction_date",
"house_age",
"distance_to_nearest_metro_station",
"no_of_convenience_stores",
"latitude",
"longitude",
"house_price")
# dropping index
df = df[,-1]
# Sorting the months (The dates range from Aug 2012 to July 2013)
months = sort(unique(df$transaction_date))
# subsetting months vector
v1 = months[1:5] # year 2012
v2 = months[6:12] # year 2013
# helper function find out month number
month = function(x){
if(x == months[1]){return(08)}
else if(x == months[2]){return(09)}
else if(x == months[3]){return(10)}
else if(x == months[4]){return(11)}
else if(x == months[5]){return(12)}
else if(x == months[6]){return(01)}
else if(x == months[7]){return(02)}
else if(x == months[8]){return(03)}
else if(x == months[9]){return(04)}
else if(x == months[10]){return(05)}
else if(x == months[11]){return(06)}
else if(x == months[12]){return(07)}
}
# helper function to determine year
year = function(x){
if(x %in% v1){return(2012)}
else if(x %in% v2) {return(2013)}
}
df$month = sapply(df$transaction_date, month) # creating month column
df$year = sapply(df$transaction_date, year) # creating year column
# Dropping transaction_date column
df = df[,-1]
